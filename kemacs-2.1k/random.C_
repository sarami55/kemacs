/*
 * This file contains the command processing functions for a number of random
 * commands. There is no functional grouping here, for sure.
 */

#include	"ecomm.h"
#include	"estruct.h"
#include	"edef.h"

int	tabsize;			/* Tab size (0: use real tabs)	*/

/*
 * Set fill column to n.
 */
/*ARGSUSED*/
setfillcol(f, n)
{
	fillcol = n;
	mlwrite(
#if KANJI
	    kterminal? CSTR("[%d 桁でフィルします]"):
#endif
	    CSTR("[Fill column is %d]"),n);
	return(TRUE);
}

/*
 * Display the current position of the cursor, in origin 1 X-Y coordinates,
 * the character that is under the cursor (in hex), and the fraction of the
 * text that is before the cursor. The displayed column is not the current
 * column, but the column that would be used on an infinite width display.
 * Normally this is bound to "C-X =".
 */
/*ARGSUSED*/
showcpos(f, n)
{
	register LINE	*lp;		/* current line */
	register long	numchars;	/* # of chars in file */
	register int	numlines;	/* # of lines in file */
	register long	predchars;	/* # chars preceding point */
	register int	predlines;	/* # lines preceding point */
	register Char	curchar;	/* character under cursor */
	int ratio;
	int col;
	int savepos;			/* temp save for current offset */
	int ecol;			/* column pos/end of current line */

	/* starting at the beginning of the buffer */
	lp = lforw(curbp->b_linep);

	/* start counting chars and lines */
	numchars = 0;
	numlines = 0;
	while (lp != curbp->b_linep) {
		/* if we are on the current line, record it */
		if (lp == curwp->w_dotp) {
			predlines = numlines;
			predchars = numchars + curwp->w_doto;
			if ((curwp->w_doto) == llength(lp))
				curchar = '¥n';
			else
				curchar = lgetc(lp, curwp->w_doto);
		}
		/* on to the next line */
		++numlines;
		numchars += llength(lp) + 1;
		lp = lforw(lp);
	}

	/* if at end of file, record it */
	if (curwp->w_dotp == curbp->b_linep) {
		predlines = numlines;
		predchars = numchars;
	}

	/* Get real column and end-of-line column. */
	col = getccol(FALSE);
	savepos = curwp->w_doto;
	curwp->w_doto = llength(curwp->w_dotp);
	ecol = getccol(FALSE);
	curwp->w_doto = savepos;

	ratio = 0;		/* Ratio before dot. */
	if (numchars != 0)
		ratio = (100L*predchars) / numchars;

	/* summarize and report the info */
	mlwrite(
#if KMSGS
	    kterminal? CSTR("行 %d/%d 桁 %d/%d 文字数 %D/%D (%d%%) コード = 0x%x"):
#endif
	    CSTR("Line %d/%d Col %d/%d Char %D/%D (%d%%) char = 0x%x"),
		predlines+1, numlines+1, col, ecol,
		predchars, numchars, ratio, curchar);
	return (TRUE);
}

getcline()	/* get the current line number */
{
	register LINE	*lp;		/* current line */
	register int	numlines;	/* # of lines before point */

	/* starting at the beginning of the buffer */
	lp = lforw(curbp->b_linep);

	/* start counting lines */
	numlines = 0;
	while (lp != curbp->b_linep) {
		/* if we are on the current line, record it */
		if (lp == curwp->w_dotp)
			break;
		++numlines;
		lp = lforw(lp);
	}

	/* and return the resulting count */
	return(numlines + 1);
}

/*
 * Return current column.  Stop at first non-blank given TRUE argument.
 */
getccol(bflg)
int bflg;
{
	register int c, i, col;
	col = 0;
	for (i=0; i<curwp->w_doto; ++i) {
		c = lgetc(curwp->w_dotp, i);
		if (c!=' ' && c!='¥t' && bflg)
			break;
		if (c == '¥t')
			col |= 0x07;
		else if (c<0x20 || c==0x7F)
			++col;
		else if (c >= 0x80 && c < 0x100)
		  col += 3;
#if KANJI
		else if (iskanji(c))
			++col;
#endif
		++col;
	}
	return(col);
}

/*
 * Set current column.
 */
setccol(pos)
	int pos;	/* position to set cursor */
{
	register Char c;	/* character being scanned */
	register int i;		/* index into current line */
	register int col;	/* current cursor column   */
	register int llen;	/* length of line in bytes */

	col = 0;
	llen = llength(curwp->w_dotp);

	/* scan the line until we are at or past the target column */
	for (i = 0; i < llen; ++i) {
		/* upon reaching the target, drop out */
		if (col >= pos)
			break;

		/* advance one character */
		c = lgetc(curwp->w_dotp, i);
		if (c == '¥t')
			col |= 0x07;
		else if (c<0x20 || c==0x7F)
			++col;
		else if (c >= 0x80 && c < 0x100)
		  col += 3;
#if KANJI
		else if (iskanji(c))
			++col;
#endif
		++col;
	}
	/* if not long enough... */
	if (col < pos)
		return(FALSE);

	/* otherwise...set us at the new position */
	curwp->w_doto = i;
	return(TRUE);
}

/*
 * Twiddle the two characters on either side of dot. If dot is at the end of
 * the line twiddle the two characters before it. Return with an error if dot
 * is at the beginning of line; it seems to be a bit pointless to make this
 * work. This fixes up a very common typo with a single stroke. Normally bound
 * to "C-T". This always works within a line, so "WFEDIT" is good enough.
 */
/*ARGSUSED*/
twiddle(f, n)
{
	register LINE	*dotp;
	register int	doto;
	register Char	cl;
	register Char	cr;

	if (curbp->b_mode&MDVIEW)	/* don't allow this command if	*/
		return(rdonly());	/* we are in read only mode	*/
	dotp = curwp->w_dotp;
	doto = curwp->w_doto;
	if (doto==llength(dotp) && --doto<0)
		return (FALSE);
	cr = lgetc(dotp, doto);
	if (--doto < 0)
		return (FALSE);
	cl = lgetc(dotp, doto);
	lputc(dotp, doto+0, cr);
	lputc(dotp, doto+1, cl);
	lchange(WFEDIT);
	return (TRUE);
}

/*
 * Quote the next character, and insert it into the buffer. All the characters
 * are taken literally, with the exception of the newline, which always has
 * its line splitting meaning. The character is always read, even if it is
 * inserted 0 times, for regularity. Bound to "C-Q"
 */
/*ARGSUSED*/
quote(f, n)
{
	register int	s;
	register Char	c;

	if (curbp->b_mode&MDVIEW)	/* don't allow this command if	*/
		return(rdonly());	/* we are in read only mode	*/
	c = tgetc();
	if (n < 0)
		return (FALSE);
	if (n == 0)
		return (TRUE);
	if (c == '¥n') {
		do {
			s = lnewline();
		} while (s==TRUE && --n);
		return (s);
	}
	return (linsert(n, c));
}

/*
 * Set tab size if given non-default argument (n <> 1).	 Otherwise, insert a
 * tab into file.  If given argument, n, of zero, change to true tabs.
 * If n > 1, simulate tab stop every n-characters using spaces. This has to be
 * done in this slightly funny way because the tab (in ASCII) has been turned
 * into "C-I" (in 10 bit code) already. Bound to "C-I".
 */
/*ARGSUSED*/
tab(f, n)
{
	if (n < 0)
		return (FALSE);
	if (n == 0 || n > 1) {
		tabsize = n;
		return(TRUE);
	}
	if (! tabsize)
		return(linsert(1, '¥t'));
	return(linsert(tabsize - (getccol(FALSE) % tabsize), ' '));
}

#if	AEDIT
detab(f, n)		/* change tabs to spaces */
{
	register int inc;	/* increment to next line [sgn(n)] */

	if (curbp->b_mode&MDVIEW)	/* don't allow this command if	*/
		return(rdonly());	/* we are in read only mode	*/

	if (f == FALSE)
		n = 1;

	/* loop thru detabbing n lines */
	inc = ((n > 0) ? 1 : -1);
	while (n) {
		curwp->w_doto = 0;	/* start at the beginning */

		/* detab the entire current line */
		while (curwp->w_doto < llength(curwp->w_dotp)) {
			/* if we have a tab */
			if (lgetc(curwp->w_dotp, curwp->w_doto) == '¥t') {
			  (void)ldelete(1L, FALSE);
			  (void)insspace(TRUE, 8 - (curwp->w_doto & 7));
			}
			(void)forwchar(FALSE, 1);
		}

		/* advance/or back to the next line */
		(void)forwline(TRUE, inc);
		n -= inc;
	}
	curwp->w_doto = 0;	/* to the begining of the line */
	thisflag &= ‾CFCPCN;	/* flag that this resets the goal column */
	lchange(WFEDIT);	/* yes, we have made at least an edit */
	return(TRUE);
}

entab(f, n)		/* change spaces to tabs where posible */
{
	register int inc;	/* increment to next line [sgn(n)] */
	register int fspace;	/* pointer to first space if in a run */
	register int ccol;	/* current cursor column */
	register Char cchar;	/* current character */

	if (curbp->b_mode&MDVIEW)	/* don't allow this command if	*/
		return(rdonly());	/* we are in read only mode	*/

	if (f == FALSE)
		n = 1;

	/* loop thru entabbing n lines */
	inc = ((n > 0) ? 1 : -1);
	while (n) {
		curwp->w_doto = 0;	/* start at the beginning */

		/* entab the entire current line */
		fspace = -1;
		ccol = 0;
		while (curwp->w_doto < llength(curwp->w_dotp)) {
			/* see if it is time to compress */
			if ((fspace >= 0) && (nextab(fspace) <= ccol))
				if (ccol - fspace < 2)
					fspace = -1;
				else {
		/* there is a bug here dealing with mixed space/tabed
		   lines.......it will get fixed		*/
					(void)backchar(TRUE, ccol - fspace);
					(void)ldelete((long)(ccol - fspace), FALSE);
					(void)linsert(1, '¥t');	
					fspace = -1;
				}

			/* get the current character */
			cchar = lgetc(curwp->w_dotp, curwp->w_doto);

			switch (cchar) {
			case '¥t': /* a tab...count em up */
			  ccol = nextab(ccol);
			  break;

			case ' ':  /* a space...compress? */
			  if (fspace == -1)
			    fspace = ccol;
			  ccol++;
			  break;

			default:   /* any other char...just count */
			  ccol++;
			  if (cchar < 0x20 || cchar == 0x7f)
			    /* takes 2 columns */
			    ccol++;
			  else if (cchar >= 0x80 && cchar < 0x100)
			    /* takes 4 columns */
			    ccol += 3;
#if KANJI
			  else if (iskanji(cchar)) ccol++;
#endif
			  fspace = -1;
			  break;
			}
			(void)forwchar(FALSE, 1);
		}

		/* advance/or back to the next line */
		(void)forwline(TRUE, inc);
		n -= inc;
	}
	curwp->w_doto = 0;	/* to the begining of the line */
	thisflag &= ‾CFCPCN;	/* flag that this resets the goal column */
	lchange(WFEDIT);	/* yes, we have made at least an edit */
	return(TRUE);
}

trim(f, n)	/* trim trailing whitespace from the point to eol */
{
	register LINE *lp;	/* current line pointer */
	register int offset;	/* original line offset position */
	register int length;	/* current length */
	register int inc;	/* increment to next line [sgn(n)] */

	if (curbp->b_mode&MDVIEW)	/* don't allow this command if	*/
		return(rdonly());	/* we are in read only mode	*/

	if (f == FALSE)
		n = 1;

	/* loop thru trimming n lines */
	inc = ((n > 0) ? 1 : -1);
	while (n) {
		lp = curwp->w_dotp;		/* find current line text */
		offset = curwp->w_doto;		/* save original offset */
		length = lp->l_used;		/* find current length */

		/* trim the current line */
		while (length > offset) {
			if (lgetc(lp, length-1) != ' ' &&
 			    lgetc(lp, length-1) != '¥t')
			    	break;
			length--;
		}
		lp->l_used = length;

		/* advance/or back to the next line */
		(void)forwline(TRUE, inc);
		n -= inc;
	}
	lchange(WFEDIT);
	thisflag &= ‾CFCPCN;	/* flag that this resets the goal column */
	return(TRUE);
}
#endif /* AEDIT */

/*
 * Open up some blank space. The basic plan is to insert a bunch of newlines,
 * and then back up over them. Everything is done by the subcommand
 * procerssors. They even handle the looping. Normally this is bound to "C-O".
 */
openline(f, n)
{
	register int	i;
	register int	s;

	if (curbp->b_mode&MDVIEW)	/* don't allow this command if	*/
		return(rdonly());	/* we are in read only mode	*/
	if (n < 0)
		return (FALSE);
	if (n == 0)
		return (TRUE);
	i = n;					/* Insert newlines.	*/
	do {
		s = lnewline();
	} while (s==TRUE && --i);
	if (s == TRUE)				/* Then back up overtop */
		s = backchar(f, n);		/* of them all.		*/
	return (s);
}

/*
 * Insert a newline. Bound to "C-M". If we are in CMODE, do automatic
 * indentation as specified.
 */
/*ARGSUSED*/
newline(f, n)
{
	register int	s;

	if (curbp->b_mode&MDVIEW)	/* don't allow this command if	*/
		return(rdonly());	/* we are in read only mode	*/
	if (n < 0)
		return (FALSE);

	/* if we are in C mode and this is a default <NL> */
	if (n == 1 && (curbp->b_mode & MDCMOD) &&
	    curwp->w_dotp != curbp->b_linep)
		return(cinsert());

	/*
	 * If a newline was typed, fill column is defined, the argument is non-
	 * negative, wrap mode is enabled, and we are now past fill column,
	 * and we are not read-only, perform word wrap.
	 */
	if ((curwp->w_bufp->b_mode & MDWRAP) && fillcol > 0 &&
	    getccol(FALSE) > fillcol &&
	    (curwp->w_bufp->b_mode & MDVIEW) == FALSE)
		(void)execute(META|SPEC|'W', FALSE, 1);

	/* insert some lines */
	while (n--) {
		if ((s=lnewline()) != TRUE)
			return (s);
	}
	return (TRUE);
}

cinsert()	/* insert a newline and indentation for C */
{
	register Char *cptr;	/* string pointer into text to copy */
	register int tptr;	/* index to scan into line */
	register int bracef;	/* was there a brace at the end of line? */
	register int i;
	Char ichar[NSTRING];	/* buffer to hold indent of last line */

	/* grab a pointer to text to copy indentation from */
	cptr = &curwp->w_dotp->l_text[0];

	/* check for a brace */
	tptr = curwp->w_doto - 1;
	bracef = (cptr[tptr] == '{');

	/* save the indent of the previous line */
	i = 0;
	while ((i < tptr) && (cptr[i] == ' ' || cptr[i] == '¥t')
		&& (i < NSTRING - 1)) {
		ichar[i] = cptr[i];
		++i;
	}
	ichar[i] = 0;		/* terminate it */

	/* put in the newline */
	if (lnewline() == FALSE)
		return(FALSE);

	/* and the saved indentation */
	i = 0;
	while (ichar[i])
		(void)linsert(1, ichar[i++]);

	/* and one more tab for a brace */
	if (bracef)
		(void)tab(FALSE, 1);

	return(TRUE);
}

insbrace(n, c)	/* insert a brace into the text here...we are in CMODE */
	int n;	/* repeat count */
	Char c; /* brace to insert (always { for now) */
{
	register Char ch;	/* last character before input */
	register int i;
	register int target;	/* column brace should go after */

	/* if we are at the beginning of the line, no go */
	if (curwp->w_doto == 0)
		return(linsert(n,c));
		
	/* scan to see if all space before this is white space */
	for (i = curwp->w_doto - 1; i >= 0; --i) {
		ch = lgetc(curwp->w_dotp, i);
		if (ch != ' ' && ch != '¥t')
			return(linsert(n, c));
	}

	/* delete back first */
	target = getccol(FALSE);	/* calc where we will delete to */
	target -= 1;
	target -= target % (tabsize == 0 ? 8 : tabsize);
	while (getccol(FALSE) > target)
		(void)backdel(FALSE, 1);

	/* and insert the required brace(s) */
	return(linsert(n, c));
}

inspound()	/* insert a # into the text here...we are in CMODE */
{
	register Char ch;	/* last character before input */
	register int i;

	/* if we are at the beginning of the line, no go */
	if (curwp->w_doto == 0)
		return(linsert(1,'#'));
		
	/* scan to see if all space before this is white space */
	for (i = curwp->w_doto - 1; i >= 0; --i) {
		ch = lgetc(curwp->w_dotp, i);
		if (ch != ' ' && ch != '¥t')
			return(linsert(1, '#'));
	}

	/* delete back first */
	while (getccol(FALSE) >= 1)
		(void)backdel(FALSE, 1);

	/* and insert the required pound */
	return(linsert(1, '#'));
}

/*
 * Delete blank lines around dot. What this command does depends if dot is
 * sitting on a blank line. If dot is sitting on a blank line, this command
 * deletes all the blank lines above and below the current line. If it is
 * sitting on a non blank line then it deletes all of the blank lines after
 * the line. Normally this command is bound to "C-X C-O". Any argument is
 * ignored.
 */
/*ARGSUSED*/
deblank(f, n)
{
	register LINE	*lp1;
	register LINE	*lp2;
	long nld;

	if (curbp->b_mode&MDVIEW)	/* don't allow this command if	*/
		return(rdonly());	/* we are in read only mode	*/
	lp1 = curwp->w_dotp;
	while (llength(lp1)==0 && (lp2=lback(lp1))!=curbp->b_linep)
		lp1 = lp2;
	lp2 = lp1;
	nld = 0;
	while ((lp2=lforw(lp2))!=curbp->b_linep && llength(lp2)==0)
		++nld;
	if (nld == 0)
		return (TRUE);
	curwp->w_dotp = lforw(lp1);
	curwp->w_doto = 0;
	return (ldelete(nld, FALSE));
}

/*
 * Insert a newline, then enough tabs and spaces to duplicate the indentation
 * of the previous line. Assumes tabs are every eight characters. Quite simple.
 * Figure out the indentation of the current line. Insert a newline by calling
 * the standard routine. Insert the indentation by inserting the right number
 * of tabs and spaces. Return TRUE if all ok. Return FALSE if one of the
 * subcomands failed. Normally bound to "C-J".
 */
/*ARGSUSED*/
indent(f, n)
{
	register int	nicol;
	register Char	c;
	register int	i;

	if (curbp->b_mode&MDVIEW)	/* don't allow this command if	*/
		return(rdonly());	/* we are in read only mode	*/
	if (n < 0)
		return (FALSE);
	while (n--) {
		nicol = 0;
		for (i=0; i<llength(curwp->w_dotp); ++i) {
			c = lgetc(curwp->w_dotp, i);
			if (c!=' ' && c!='¥t')
				break;
			if (c == '¥t')
				nicol |= 0x07;
			++nicol;
		}
		if (lnewline() == FALSE
		|| ((i=nicol/8)!=0 && linsert(i, '¥t')==FALSE)
		|| ((i=nicol%8)!=0 && linsert(i,  ' ')==FALSE))
			return (FALSE);
	}
	return (TRUE);
}

/*
 * Delete forward. This is real easy, because the basic delete routine does
 * all of the work. Watches for negative arguments, and does the right thing.
 * If any argument is present, it kills rather than deletes, to prevent loss
 * of text if typed with a big argument. Normally bound to "C-D".
 */
forwdel(f, n)
{
	if (curbp->b_mode&MDVIEW)	/* don't allow this command if	*/
		return(rdonly());	/* we are in read only mode	*/
	if (n < 0)
		return (backdel(f, -n));
	if (f != FALSE) {			/* Really a kill.	*/
		if ((lastflag&CFKILL) == 0)
			kdelete();
		thisflag |= CFKILL;
	}
	return (ldelete((long)n, f));
}

/*
 * Delete backwards. This is quite easy too, because it's all done with other
 * functions. Just move the cursor back, and delete forwards. Like delete
 * forward, this actually does a kill if presented with an argument. Bound to
 * both "RUBOUT" and "C-H".
 */
backdel(f, n)
{
	register int	s;

	if (curbp->b_mode&MDVIEW)	/* don't allow this command if	*/
		return(rdonly());	/* we are in read only mode	*/
	if (n < 0)
		return (forwdel(f, -n));
	if (f != FALSE) {			/* Really a kill.	*/
		if ((lastflag&CFKILL) == 0)
			kdelete();
		thisflag |= CFKILL;
	}
	if ((s=backchar(f, n)) == TRUE)
		s = ldelete((long)n, f);
	return (s);
}

/*
 * Kill text. If called without an argument, it kills from dot to the end of
 * the line, unless it is at the end of the line, when it kills the newline.
 * If called with an argument of 0, it kills from the start of the line to dot.
 * If called with a positive argument, it kills from dot forward over that
 * number of newlines. If called with a negative argument it kills backwards
 * that number of newlines. Normally bound to "C-K".
 */
killtext(f, n)
{
	register LINE	*nextp;
	long chunk;

	if (curbp->b_mode&MDVIEW)	/* don't allow this command if	*/
		return(rdonly());	/* we are in read only mode	*/
	if ((lastflag&CFKILL) == 0)		/* Clear kill buffer if */
		kdelete();			/* last wasn't a kill.	*/
	thisflag |= CFKILL;
	if (f == FALSE) {
		chunk = llength(curwp->w_dotp)-curwp->w_doto;
		if (chunk == 0)
			chunk = 1;
	} else if (n == 0) {
		chunk = curwp->w_doto;
		curwp->w_doto = 0;
	} else if (n > 0) {
		chunk = llength(curwp->w_dotp)-curwp->w_doto+1;
		nextp = lforw(curwp->w_dotp);
		while (--n) {
			if (nextp == curbp->b_linep)
				return (FALSE);
			chunk += llength(nextp)+1;
			nextp = lforw(nextp);
		}
	} else {
		mlwrite(
#if KMSGS
		    kterminal? CSTR("負の数が指定されました"):
#endif
		    CSTR("neg kill"));
		return (FALSE);
	}
	return(ldelete(chunk, TRUE));
}

/*ARGSUSED*/
set_mode(f, n)	/* prompt and set an editor mode */
{
	(void)adjustmode(TRUE, FALSE);
	return(TRUE);
}

/*ARGSUSED*/
delmode(f, n)	/* prompt and delete an editor mode */
{
	(void)adjustmode(FALSE, FALSE);
	return(TRUE);
}

/*ARGSUSED*/
setgmode(f, n)	/* prompt and set a global editor mode */
{
	(void)adjustmode(TRUE, TRUE);
	return(TRUE);
}

/*ARGSUSED*/
delgmode(f, n)	/* prompt and delete a global editor mode */
{
	(void)adjustmode(FALSE, TRUE);
	return(TRUE);
}

adjustmode(kind, global)	/* change the editor mode status */
	int kind;	/* true = set,		false = delete */
	int global;	/* true = global flag,	false = current buffer flag */
{
	register int i;			/* loop index */
	register int status;		/* error return on input */
#if	COLOR
	register int uflag;		/* was modename uppercase?	*/
#endif
	Char prompt[NPAT];		/* string to prompt user with */
	Char cbuf[NPAT];		/* buffer to recieve mode name into */

	/* build the proper prompt string */
#if KMSGS
	if (kterminal) {
		if (kind == TRUE)
			(void)Cstrcpy(prompt, CSTR("追加"));
		else
			(void)Cstrcpy(prompt, CSTR("削除"));
		(void)Cstrcat(prompt, CSTR("する"));
		if (global)
			(void)Cstrcat(prompt, CSTR("グローバル "));
		(void)Cstrcat(prompt, CSTR("モード名: "));
	} else {
#endif
	if (global)
		(void)Cstrcpy(prompt,CSTR("Global mode to "));
	else
		(void)Cstrcpy(prompt,CSTR("Mode to "));

	if (kind == TRUE)
		(void)Cstrcat(prompt, CSTR("add: "));
	else
		(void)Cstrcat(prompt, CSTR("delete: "));
#if KANJI
	}
#endif

	/* prompt the user and get an answer */

	status = mlreply(prompt, cbuf, NPAT - 1);
	if (status != TRUE)
		return(FALSE);

	/* make it uppercase */
#if	COLOR
	uflag = isUpper(*cbuf);
#endif
	(void)mkupper(cbuf);

#if	COLOR
	/* test it first against the colors we know */
	for (i=0; i<NCOLORS; i++) {
		if (Cstrcmp(cbuf, cname[i]) == 0) {
			/* finding the match, we set the color */
			if (uflag) {
				if (global)
					gfcolor = i;
				else
					curwp->w_fcolor = i;
			} else {
				if (global)
					gbcolor = i;
				else
					curwp->w_bcolor = i;
			}
			curwp->w_flag |= WFCOLR;
			mlerase();
			return(TRUE);
		}
	}
#endif /* COLOR */

	/* test it against the modes we know */

	for (i=0; modename[i] != NULL; i++) {
		if (Cstrcmp(cbuf, modename[i]) == 0) {
			/* finding a match, we process it */
			if (kind == TRUE) {
				if (global)
					gmode |= (1 << i);
				else
					curwp->w_bufp->b_mode |= (1 << i);
			} else {
				if (global)
					gmode &= ‾(1 << i);
				else
					curwp->w_bufp->b_mode &= ‾(1 << i);
			}
			/* display new mode line */
			if (!global)
				upmode();
			/* mode related things */
#if	KANJI
			if ((1<<i) == MDBINARY) {
			  if (global)
			    KS_INTERP(kcode) =
			      (kind == TRUE)? KS_BINARY: KS_KANJI;
			  else
			    KS_INTERP(curbp->b_code) =
			      (kind == TRUE)? KS_BINARY: KS_KANJI;
			}
#endif /* KANJI */
			mlerase();	/* erase the junk */
			return(TRUE);
		}
	}

	mlwrite(
#if KMSGS
	    kterminal? CSTR("そんなモードはありません!"):
#endif
	    CSTR("No such mode!"));
	return(FALSE);
}

/*	This function simply clears the message line,
		mainly for macro usage			*/

/*ARGSUSED*/
clrmes(f, n)
{
	mlwrite(CSTR(""));
	return(TRUE);
}

/*	This function writes a string on the message line
		mainly for macro usage			*/

/*ARGSUSED*/
writemsg(f, n)
{
	register int status;
	Char buf[NPAT];		/* buffer to recieve message into */

	if ((status = mlreply(
#if KMSGS
			kterminal? CSTR("表示するメッセージ: "):
#endif
			CSTR("Message to write: "),
			buf, NPAT - 1)) != TRUE)
		return(status);

	mlwrite(CSTR("%s"), buf);
	return(TRUE);
}

#if	CFENCE
/*	the cursor is moved to a matching fence */

/*ARGSUSED*/
getfence(f, n)
{
	register LINE *oldlp;	/* original line pointer */
	register int oldoff;	/* and offset */
	register int sdir;	/* direction of search (1/-1) */
	register int count;	/* current fence level count */
	register Char ch;	/* fence type to match against */
	register Char ofence;	/* open fence */
	register Char c;	/* current character in scan */

	/* save the original cursor position */
	oldlp = curwp->w_dotp;
	oldoff = curwp->w_doto;

	/* get the current character */
	ch = (oldoff == llength(oldlp))? '¥n': lgetc(oldlp, oldoff);

	/* setup proper matching fence */
	switch (ch) {
	case '(': ofence = ')'; sdir = FORWARD; break;
	case '{': ofence = '}'; sdir = FORWARD; break;
	case '[': ofence = ']'; sdir = FORWARD; break;
	case ')': ofence = '('; sdir = REVERSE; break;
	case '}': ofence = '{'; sdir = REVERSE; break;
	case ']': ofence = '['; sdir = REVERSE; break;
	default: TTbeep(); return(FALSE);
	}

	/* set up for scan */
	count = 1;
	if (sdir == REVERSE)
		(void)backchar(FALSE, 1);
	else
		(void)forwchar(FALSE, 1);

	/* scan until we find it, or reach the end of file */
	while (count > 0) {
		c = (curwp->w_doto == llength(curwp->w_dotp))?
		  '¥n':
		  lgetc(curwp->w_dotp, curwp->w_doto);
		if (c == ch)
			++count;
		if (c == ofence)
			--count;
		if (sdir == FORWARD)
			(void)forwchar(FALSE, 1);
		else
			(void)backchar(FALSE, 1);
		if (boundry(curwp->w_dotp, curwp->w_doto, sdir))
			break;
	}

	/* if count is zero, we have a match, move the sucker */
	if (count == 0) {
		if (sdir == FORWARD)
			(void)backchar(FALSE, 1);
		else
			(void)forwchar(FALSE, 1);
		curwp->w_flag |= WFMOVE;
		return(TRUE);
	}

	/* restore the current position */
	curwp->w_dotp = oldlp;
	curwp->w_doto = oldoff;
	TTbeep();
	return(FALSE);
}
#endif

/*	Close fences are matched against their partners, and if
	on screen the cursor briefly lights there		*/

fmatch(ch)
	Char ch;	/* fence type to match against */
{
	register LINE *oldlp;	/* original line pointer */
	register int oldoff;	/* and offset */
	register LINE *toplp;	/* top line in current window */
	register int count;	/* current fence level count */
	register Char opench;	/* open fence */
	register Char c;	/* current character in scan */
	register int i;

	/* first get the display update out there */
	update(FALSE);

	/* save the original cursor position */
	oldlp = curwp->w_dotp;
	oldoff = curwp->w_doto;

	/* setup proper open fence for passed close fence */
	if (ch == ')')
		opench = '(';
	else if (ch == '}')
		opench = '{';
	else
		opench = '[';

	/* find the top line and set up for scan */
	toplp = curwp->w_linep->l_bp;
	count = 1;
	(void)backchar(FALSE, 2);

	/* scan back until we find it, or reach past the top of the window */
	while (count > 0 && curwp->w_dotp != toplp) {
		c = (curwp->w_doto == llength(curwp->w_dotp))?
		  '¥n':
		  lgetc(curwp->w_dotp, curwp->w_doto);
		if (c == ch)
			++count;
		if (c == opench)
			--count;
		(void)backchar(FALSE, 1);
		if (curwp->w_dotp == curwp->w_bufp->b_linep->l_fp &&
		    curwp->w_doto == 0)
			break;
	}

	/* if count is zero, we have a match, display the sucker */
	/* there is a real machine dependant timing problem here we have
	   yet to solve......... */
	if (count == 0) {
		(void)forwchar(FALSE, 1);
		for (i = 0; i < term.t_pause; i++)
			update(FALSE);
	}

	/* restore the current position */
	curwp->w_dotp = oldlp;
	curwp->w_doto = oldoff;
}

/*ARGSUSED*/
istring(f, n)	/* ask for and insert a string into the current
		   buffer at the current point */
{
	register Char *tp;	/* pointer into string to add */
	register int status;	/* status return code */
	Char tstring[NPAT+1];	/* string to add */

	/* ask for string to insert */
	status = mlreplyt(
#if KMSGS
			kterminal? CSTR("挿入する文字列<META>: "):
#endif
			CSTR("String to insert<META>: "),
			tstring, NPAT, metac);
	if (status != TRUE)
		return(status);

	if (f == FALSE)
		n = 1;

	if (n < 0)
		n = - n;

	/* insert it */
	while (n--) {
		tp = &tstring[0];
		while (*tp) {
				if (*tp == 0x0a)
				status = lnewline();
			else
				status = linsert(1, *tp);
			++tp;
			if (status != TRUE)
				return(status);
		}
	}
	return(TRUE);
}

/*
 * Clear kill buffer
 */
/*ARGSUSED*/
clearkill(f, n)
{
	kdelete();
	thisflag |= CFKILL;
	return(TRUE);
}

/*
 * No operation
 */
/*ARGSUSED*/
noop(f, n)
{
	return(TRUE);
}

/*
 * change current working directory
 */
/*ARGSUSED*/
changewd(f, n)
{
	register int status;	/* status return code */
	Char dir[NFILEN+1];	/* name of directory */
#if !USE_GETCWD
	char *getwd();
#else
	char *getcwd();
#endif
	register Char *p;
#if FEXPAND
	Char *fexpand();
#endif

	/* ask for the name of directory */
	status = mlreply(
#if KMSGS
			kterminal? CSTR("ディレクトリ: "):
#endif
			CSTR("Change directory to: "),
			dir, NFILEN);
	if (status == ABORT) {
		mlwrite(
#if KMSGS
			kterminal? CSTR("[中止されました]"):
#endif
			CSTR("[Aborted]"));
		return(status);
	} else if (status == FALSE) {
		(void)Cstrcpy(dir, Cfromc(getenv("HOME")));
	}
#if FEXPAND
	(void)Cstrcpy(dir, fexpand(dir));
#endif

	if ((status = chdir(cfromC(dir))) < 0) {
		mlwrite(
#if KMSGS
			kterminal? CSTR("['%s' に chdir できません]"):
#endif
			CSTR("[Can't chdir to '%s']"),
			dir);
		return(FALSE);
	}
	mlwrite(CSTR("%s"),
#if !USE_GETCWD
		p=SafeCfromc(getwd((char *)dir)));
#else
		p=SafeCfromc(getcwd((char *)dir, NFILEN)));
#endif
	Free(p);
	return(TRUE);
}

#if AUTOMODE
/*ARGSUSED*/
automode(f, n)
{
	register int i;			/* loop index */
	int mode;
	Char fpat[NPAT];		/* pattern */
	Char cbuf[NPAT];		/* buffer to recieve mode name into */
	char *p, *q;
#if HAVE_REGEX
	regex_t preg;
#endif

	/* prompt the user and get an answer */
	(void)mlreply(
#if KMSGS
		kterminal? CSTR("追加するモード: "):
#endif
		CSTR("Mode to add: "),
		cbuf, NPAT - 1);

	/* make it uppercase */
	(void)mkupper(cbuf);

	mode = -1;
	/* test it against the modes we know */
	for (i=0; modename[i] != NULL; i++) {
		if (Cstrcmp(cbuf, modename[i]) == 0) {
			mode = (1 << i);
			break;
		}
	}

	if (mode < 0) {
		mlwrite(
#if KMSGS
		    kterminal? CSTR("そんなモードはありません!"):
#endif
		    CSTR("No such mode!"));
		return(FALSE);
	}

	/* input pattern */
	if (mlreply(
#if KMSGS
		kterminal? CSTR("パターン: "):
#endif
		CSTR("Pattern: "),
		fpat, NPAT-1) == ABORT) {
		mlwrite(
#if KMSGS
			kterminal? CSTR("[中止されました]"):
#endif
			CSTR("[Aborted]"));
		return(FALSE);
	}
	p = cfromC(fpat);
	if (
#if HAVE_REGEX
	    regcomp(&preg, p, REG_NOSUB) != 0
#else
# if	BSD
	    re_comp(p) != NULL
# endif
# if	USG
	    regcmp(p, (char *)0) == NULL
# endif
#endif
				) {
		mlwrite(
#if KMSGS
			kterminal? CSTR("パターンに誤りがあります"):
#endif
			CSTR("Invalid pattern"));
		return(FALSE);
	}
#if HAVE_REGEX
	else regfree(&preg);
#endif
	if (npatent >= NMPAT) {
		mlwrite(
#if KMSGS
			kterminal? CSTR("これ以上指定できません"):
#endif
			CSTR("Pattern table full"));
		return(FALSE);
	}
	if ((q = malloc(strlen(p))) == NULL) {
		mlwrite(
#if KMSGS
			kterminal? CSTR("メモリが足りません"):
#endif
			CSTR("No more memory"));
		return(FALSE);
	}
	pattbl[npatent].pat = strcpy(q, p);
	pattbl[npatent++].mode = mode;
	return(TRUE);
}
#endif /*AUTOMODE*/
