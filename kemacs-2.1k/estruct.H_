/*	ESTRUCT:	Structure and preprocesser defined for
			MicroEMACS 3.8

			written by Dave G. Conroy
			modified by Steve Wilhite, George Jones
			greatly modified by Daniel Lawrence
*/

/*	Configuration options	*/

#define CVMVAS	0	/* arguments to page forward/back in pages	*/
#define	NFWORD	1	/* forward word jumps to beginning of word	*/
#define CLRMSG	0	/* space clears the message line with no insert */
#define CFENCE	1	/* fench matching in CMODE			*/
#define	TYPEAH	1	/* type ahead causes update to be skipped	*/
#define DEBUGM	1	/* macro debugging				*/
#define	VISMAC	0	/* update display during keyboard macros	*/
#define	REVSTA	1	/* Status line appears in reverse video		*/
#define	COLOR	0	/* color commands and windows			*/
#define ISRCH	1	/* Incremental searches like ITS EMACS		*/
#define WORDPRO 1	/* Advanced word processing features		*/
#define	FLABEL	0	/* function key label code			*/
#define	APROP	1	/* Add code for Apropos command			*/
#define	CRYPT	0	/* file encryption				*/
#define MAGIC	1	/* include regular expression matching		*/
#define KMSGS	1	/* display KANJI messages if $kanji set.	*/
#define AUTOMODE 1	/* set MODE automatically by pattern matching	*/
#define FEXPAND	1	/* expand special character in filename ('~')	*/
#define ASAVE	1	/* automatic save				*/
#define	AEDIT	1	/* advanced editing options:
			   en/detabbing, rectangular regions [later]	*/
#define	PROC	1	/* named procedures				*/
#define RESTRICT 0	/* restricted use of commands			*/
#define CLOCK	1	/* periodically update clock on modeline	*/
#define COMPAT	1	/* accept old version's macro definiton		*/

#define MAX_SCREEN_LINES	128	/* max # of lines on screen	*/
#define MAX_SCREEN_COLUMNS	256	/* max # of columns on screen	*/

/******* end of configuration *******/

/* maintain consistency */

#if !KANJI
# undef KMSGS
# define KMSGS 0
#endif

/*	internal constants	*/

#define NBINDS	256			/* max # of bound keys		*/
#define NFILEN	256			/* # of bytes, file name	*/
				/* (original was 64; changed by N.Nide) */
#define NBUFN	128			/* # of bytes, buffer name	*/
				/* (original was 32; changed by N.Nide) */
#define NLINE	1024			/* # of bytes, line		*/
#define NSTRING 1024			/* # of bytes, string buffers	*/
#define NKBDM	256			/* # of strokes, keyboard macro */
#define NPAT	256			/* # of bytes, pattern		*/
#define HUGE	1000			/* Huge number			*/
#if COLOR
# define NCOLORS 8			/* number of supported colors	*/
#endif
#define KBLOCK	250			/* sizeof kill buffer chunks	*/
#define NBLOCK	16			/* line block chunk size	*/
#define	NVSIZE	32			/* max #chars in a var name	*/
#define NMPAT	32			/* max # of matching pattern	*/
#if	CLOCK
# define CPERIOD 30			/* period of updating clock	*/
#endif

#define CK_FLAGS 0xffff0000		/* flags to keystrokes		*/
#define CTLFLG	0x010000		/* Control flag, or'ed in	*/
#define META	0x020000		/* Meta flag, or'ed in		*/
#define CTLX	0x040000		/* ^X flag, or'ed in		*/
#define SPEC	0x080000		/* special key (function keys)	*/

#define FALSE	0			/* False, no, bad, etc.		*/
#define TRUE	1			/* True, yes, good, etc.	*/
#define ABORT	2			/* Death, ^G, abort, etc.	*/
#define	FAILED	3			/* not-quite fatal false return	*/
#define	RET	4			/* a return from buffer		*/
#define	GOLINE	5			/* exit flagging a GOTO		*/

#define	STOP	0			/* keyboard macro not in use	*/
#define	PLAY	1			/*		  playing	*/
#define	RECORD	2			/*		  recording	*/

/*
 * PTBEG, PTEND, FORWARD, and REVERSE are all toggle-able values for
 * the scan routines.
 */
#define	PTBEG	0	/* Leave the point at the beginning on search	*/
#define	PTEND	1	/* Leave the point at the end on search		*/

#define	FORWARD	0			/* forward direction		*/
#define REVERSE	1			/* backwards direction		*/

#define FIOSUC	0			/* File I/O, success.		*/
#define FIOFNF	1			/* File I/O, file not found.	*/
#define FIOEOF	2			/* File I/O, end of file.	*/
#define FIOERR	3			/* File I/O, error.		*/
#define	FIOLNG	4			/* line longer than allowed len	*/
#define	FIOFUN	5			/* File I/O, eod of file/bad line*/

#define CFCPCN	0x0001			/* Last command was C-P, C-N	*/
#define CFKILL	0x0002			/* Last command was a kill	*/

#define BELL	0x07			/* a bell character		*/
#define TAB	0x09			/* a tab character		*/

/* command keystroke type (Char + flags; 32 bit is VERY long!) */
typedef unsigned long	Ckey;

/* 8-bit integer type (prevent the use of the word 'char' for this purpose) */
typedef char		byte;

typedef int bool;

#define	PATHCHR		':'		/* PATH delimiter character	*/

#define	INTWIDTH	(sizeof(int)*24/10 + 2)
					/* max # of column to print	*/
					/* integers			*/

/*	Macro argument token types					*/

#define	TKNUL	0			/* end-of-string		*/
#define	TKARG	1			/* interactive argument		*/
#define	TKBUF	2			/* buffer argument		*/
#define	TKVAR	3			/* user variables		*/
#define	TKENV	4			/* environment variables	*/
#define	TKFUN	5			/* function....			*/
#define	TKDIR	6			/* directive			*/
#define	TKLBL	7			/* line label			*/
#define	TKLIT	8			/* numeric literal		*/
#define	TKSTR	9			/* quoted string literal	*/
#define	TKCMD	10			/* command name			*/

/*	Internal defined functions					*/

#define	nextab(a)	(a & ~7) + 8
#ifdef abs
# undef	abs
#endif

/* DIFCASE represents the integer difference between upper
 * and lower case letters.  It is an xor-able value, which is
 * fortunate, since the relative positions of upper to lower
 * case letters is the opposite of ascii in ebcdic.
 */

#define	DIFCASE		0x20
#define isLower(c)	('a'<=(c)&&(c)<='z')
#define isUpper(c)	('A'<=(c)&&(c)<='Z')
#define isAlpha(c)	(isLower(c)||isUpper(c))
#define isDigit(c)	('0'<=(c)&&(c)<='9')

/*
 * There is a window structure allocated for every active display window. The
 * windows are kept in a big list, in top to bottom screen order, with the
 * listhead at "wheadp". Each window contains its own values of dot and mark.
 * The flag field contains some bits that are set by commands to guide
 * redisplay. Although this is a bit of a compromise in terms of decoupling,
 * the full blown redisplay is just too expensive to run for every input
 * character.
 */
typedef struct	WINDOW {
	int	w_id;			/* ID				*/
	struct	WINDOW *w_wndp;		/* Next window			*/
	struct	BUFFER *w_bufp;		/* Buffer displayed in window	*/
	struct	LINE *w_linep;		/* Top line in the window	*/
	struct	LINE *w_dotp;		/* Line containing "."		*/
	int	w_doto;			/* Byte offset for "."		*/
	struct	LINE *w_markp;		/* Line containing "mark"	*/
	int	w_marko;		/* Byte offset for "mark"	*/
	int	w_toprow; /* was byte *//* Origin 0 top row of window	*/
	int	w_ntrows; /* was byte *//* # of rows of text in window	*/
	int	w_force;  /* was byte *//* If NZ, forcing row.		*/
	byte	w_flag;			/* Flags.			*/
#if	COLOR
	byte	w_fcolor;		/* current forground color	*/
	byte	w_bcolor;		/* current background color	*/
#endif
}	WINDOW;

#define WFFORCE 0x01			/* Window needs forced reframe	*/
#define WFMOVE	0x02			/* Movement from line to line	*/
#define WFEDIT	0x04			/* Editing within a line	*/
#define WFHARD	0x08			/* Better to a full display	*/
#define WFMODE	0x10			/* Update mode line.		*/
#define WFCOLR	0x20			/* Needs a color change		*/

/*
 * Text is kept in buffers. A buffer header, described below, exists for every
 * buffer in the system. The buffers are kept in a big list, so that commands
 * that search for a buffer by name can find the buffer header. There is a
 * safe store for the dot and mark in the header, but this is only valid if
 * the buffer is not being displayed (that is, if "b_nwnd" is 0). The text for
 * the buffer is kept in a circularly linked list of lines, with a pointer to
 * the header line in "b_linep".
 *	Buffers may be "Inactive" which means the files associated with them
 * have not been read in yet. These get read in at "use buffer" time.
 */
typedef struct	BUFFER {
	struct	BUFFER *b_bufp;		/* Link to next BUFFER		*/
	struct	LINE *b_dotp;		/* Link to "." LINE structure	*/
	int	b_doto;			/* Offset of "." in above LINE	*/
	struct	LINE *b_markp;		/* The same as the above two,	*/
	int	b_marko;		/* but for the "mark"		*/
	struct	LINE *b_linep;		/* Link to the header LINE	*/
	byte	b_active;		/* window activated flag	*/
	byte	b_flag;			/* Flags			*/
	int	b_nwnd; /* was byte */	/* Count of windows on buffer	*/
	int	b_mode;			/* editor mode of this buffer	*/
	Char	*b_fname;		/* File name			*/
	Char	*b_bname;		/* Buffer name			*/
#if	CRYPT
	Char	*b_key;			/* current encrypted key	*/
#endif
#if	KANJI
	KS_FLAG	b_code;			/* KANJI code used when output	*/
#endif
	Char	*b_modeline;		/* mode line format string	*/
}	BUFFER;

#define BFINVS	0x01			/* Internal invisable buffer	*/
#define BFCHG	0x02			/* Changed since last write	*/

/*	mode flags	*/
enum bmode {
	bm_wrap,
#define MDWRAP	(1<<(int)bm_wrap)	/* word wrap			*/
	bm_cmod,
#define MDCMOD	(1<<(int)bm_cmod)	/* C indentation and fence match*/
	bm_spell,
#define MDSPELL (1<<(int)bm_spell)	/* spell error parcing		*/
	bm_exact,
#define MDEXACT (1<<(int)bm_exact)	/* Exact matching for searches	*/
	bm_view,
#define MDVIEW	(1<<(int)bm_view)	/* read-only buffer		*/
	bm_over,
#define MDOVER	(1<<(int)bm_over)	/* overwrite mode		*/
#if	MAGIC
	bm_magic,
# define MDMAGIC (1<<(int)bm_magic)	/* regular expresions in search */
#endif
#if CRYPT
	bm_crypt,
# define MDCRYPT (1<<(int)bm_crypt)	/* encrytion mode active	*/
#endif
#if	ASAVE
	bm_asave,
# define MDASAVE (1<<(int)bm_asave)	/* auto save mode		*/
#endif
#if	KANJI
	bm_binary,
# define MDBINARY (1<<(int)bm_binary)	/* non-KANJI mode		*/
#endif
};

/*
 * The starting position of a region, and the size of the region in
 * characters, is kept in a region structure.  Used by the region commands.
 */
typedef struct	{
	struct	LINE *r_linep;		/* Origin LINE address.		*/
	int	r_offset;		/* Origin LINE offset.		*/
	long	r_size;			/* Length in characters.	*/
}	REGION;

/*
 * All text is kept in circularly linked lists of "LINE" structures. These
 * begin at the header line (which is the blank line beyond the end of the
 * buffer). This line is pointed to by the "BUFFER". Each line contains a the
 * number of bytes in the line (the "used" size), the size of the text array,
 * and the text. The end of line is not stored as a byte; it's implied. Future
 * additions will include update hints, and a list of marks into the line.
 */
typedef struct	LINE {
	struct	LINE *l_fp;		/* Link to the next line	*/
	struct	LINE *l_bp;		/* Link to the previous line	*/
	int	l_size;			/* Allocated size		*/
	int	l_used;			/* Used size			*/
	Char	l_text[1];		/* A bunch of characters.	*/
}	LINE;

#define lforw(lp)	((lp)->l_fp)
#define lback(lp)	((lp)->l_bp)
#define lgetc(lp, n)	((lp)->l_text[(n)])
#define lputc(lp, n, c) ((lp)->l_text[(n)]=(c))
#define llength(lp)	((lp)->l_used)

/*
 * The editor communicates with the display using a high level interface. A
 * "TERM" structure holds useful variables, and indirect pointers to routines
 * that do useful operations. The low level get and put routines are here too.
 * This lets a terminal, in addition to having non standard commands, have
 * funny get and put character code too. The calls might get changed to
 * "termp->t_field" style in the future, to make it possible to run more than
 * one terminal type.
 */
typedef struct	{
	int	t_mrow;			/* max number of rows allowable */
        int   t_nrow;                 /* current number of rows used  */
        int   t_mcol;                 /* max Number of columns.       */
        int   t_ncol;                 /* current Number of columns.   */
	int	t_margin;		/* min margin for extended lines*/
	int	t_scrsiz;		/* size of scroll region	*/
	int	t_pause;		/* # times thru update to pause */
	int	(*t_open)();		/* Open terminal at the start.	*/
	int	(*t_close)();		/* Close terminal at end.	*/
	int	(*t_kopen)();		/* Open keyboard		*/
	int	(*t_kclose)();		/* close keyboard		*/
        Char	(*t_getchar)();		/* Get character from keyboard. */
	int	(*t_putchar)();		/* Put character to display.	*/
	int	(*t_flush)();		/* Flush output buffers.	*/
	int	(*t_move)();		/* Move the cursor, origin 0.	*/
	int	(*t_eeol)();		/* Erase to end of line.	*/
	int	(*t_eeop)();		/* Erase to end of page.	*/
	int	(*t_beep)();		/* Beep.			*/
	int	(*t_rev)();		/* set reverse video state	*/
#if	COLOR
	int	(*t_setfor)();		/* set forground color		*/
	int	(*t_setback)();		/* set background color		*/
#endif
#if	KANJI
	KS_FLAG	t_code;			/* terminal KANJI code		*/
#endif	/*KANJI*/
}	TERM;

/*	TEMPORARY macros for terminal I/O  (to be placed in a machine
					    dependant place later)	*/

#define	TTopen		(*term.t_open)
#define	TTclose		(*term.t_close)
#define	TTkopen		(*term.t_kopen)
#define	TTkclose	(*term.t_kclose)
#define	TTgetc		(*term.t_getchar)
#define	TTputc		(*term.t_putchar)
#define	TTflush		(*term.t_flush)
#define	TTmove		(*term.t_move)
#define	TTeeol		(*term.t_eeol)
#define	TTeeop		(*term.t_eeop)
#define	TTbeep		(*term.t_beep)
#define	TTrev		(*term.t_rev)
#define	TTrez		(*term.t_rez)
#if	COLOR
#define	TTforg		(*term.t_setfor)
#define	TTbacg		(*term.t_setback)
#endif

/*	structure for the table of initial key bindings		*/

typedef struct	{
	Ckey	k_code;			/* Key code			*/
	int	(*k_fp)();		/* Routine to handle it		*/
}	KEYTAB;

/*	structure for the name binding table		*/

typedef struct {
	Char *n_name;		/* name of function key */
	int (*n_func)();	/* function name is bound to */
}	NBIND;

/*	The editor holds deleted text chunks in the KILL buffer. The
	kill buffer is logically a stream of ascii characters, however
	due to its unpredicatable size, it gets implemented as a linked
	list of chunks. (The d_ prefix is for "deleted" text, as k_
	was taken up by the keycode structure)			*/

typedef struct KILL {
	struct KILL *d_next;	/* link to next chunk, NULL if last */
	Char d_chunk[KBLOCK];	/* deleted text */
} KILL;

#if AUTOMODE
/*
 * pattern table for auto MODE setting
 */
typedef struct PATTBL {
	char *pat;
	int mode;
} PATTBL;
#endif

/*
 * Incremental search defines.
 */
#if	ISRCH

#define	CMDBUFLEN	256	/* Length of our command buffer */

#define	IS_ABORT	0x07	/* Abort the isearch */
#define IS_BACKSP	0x08	/* Delete previous char */
#define	IS_TAB		0x09	/* Tab character (allowed search char) */
#define IS_NEWLINE	0x0D	/* New line from keyboard (Carriage return) */
#define	IS_QUOTE	0x11	/* Quote next character */
#define IS_REVERSE	0x12	/* Search backward */
#define	IS_FORWARD	0x13	/* Search forward */
#define	IS_RUBOUT	0x7F	/* Delete previous character */

#endif

#if	MAGIC

/*
 * Defines for the metacharacters in the regular expressions in search
 * routines.
 */

#define	MCNIL		0	/* Like the '\0' for strings.*/
#define	LITCHAR		1
#define	ANY		2
#define	CCL		3
#define	NCCL		4
#define	BOL		5
#define	EOL		6
#define	CLOSURE		256	/* An or-able value.*/
#define	MASKCL		CLOSURE - 1

#define	MC_ANY		'.'	/* 'Any' character (except newline).*/
#define	MC_CCL		'['	/* Character class.*/
#define	MC_NCCL		'^'	/* Negate character class.*/
#define	MC_RCCL		'-'	/* Range in character class.*/
#define	MC_ECCL		']'	/* End of character class.*/
#define	MC_BOL		'^'	/* Beginning of line.*/
#define	MC_EOL		'$'	/* End of line.*/
#define	MC_CLOSURE	'*'	/* Closure - does not extend past newline.*/

#define	MC_ESC		'\\'	/* Escape - suppress meta-meaning.*/

#define	BIT(n)		(1 << (n))	/* An integer with one bit set.*/
#define	CHCASE(c)	((c) ^ DIFCASE)	/* Toggle the case of a letter.*/

/* HICHAR - 1 is the largest character we will deal with.
 * HIBYTE represents the number of bytes in the bitmap.
 */

#define	HICHAR		(2<<16)
#define	HIBYTE		HICHAR >> 3

typedef char	*BITMAP;

typedef	struct {
	int	mc_type;
	union {
		int	lchar;
		BITMAP	cclmap;
	} u;
} MC;
#endif
